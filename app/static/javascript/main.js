// Generated by CoffeeScript 1.8.0
(function() {
  var CommentBox, DiceView, d;

  d = React.DOM;

  DiceView = React.createClass({
    getInitialState: function() {
      var dice, i, _i;
      dice = [];
      for (i = _i = 0; _i < 6; i = ++_i) {
        dice[i] = {};
        dice[i].value = i + 1;
        dice[i].state = 0;
        dice[i].id = i;
      }
      return {
        dice: dice,
        heldDice: [],
        rollScore: 0,
        totalScore: 0,
        roundScore: 0,
        selectedDice: [],
        canSelect: false
      };
    },
    selectDice: function(override) {
      if (override == null) {
        override = false;
      }
      if (!this.state.canSelect) {
        console.log("now can select");
        $('img').removeClass("more-faded").removeClass('faded');
        $('img').on("click", this.imageClick);
        this.setState({
          canSelect: true
        });
      }
      if (override) {
        return $('img').off("click", this.imageClick);
      }
    },
    farkled: function() {
      this.setState({
        rollScore: this.props.player.setTempScore(0),
        roundScore: 0
      });
      this.resetDice();
      this.selectDice(true);
      return this.setState({
        canSelect: false
      });
    },
    checkCalculated: function() {
      var index, items, _ref, _results;
      _ref = this.state.dice;
      _results = [];
      for (index in _ref) {
        items = _ref[index];
        if (items.state === 1) {
          console.log("setting to -1");
          _results.push(this.setDiceState(index, -1));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    },
    resetDice: function() {
      var index, items, _ref;
      _ref = this.state.dice;
      for (index in _ref) {
        items = _ref[index];
        this.setDiceState(index, 0);
        $("#die" + items.id).removeClass("faded").addClass("more-faded");
      }
      return this.selectDice(true);
    },
    setDiceState: function(index, state) {
      var currentDice;
      currentDice = this.state.dice;
      currentDice[index].state = state;
      return this.setState({
        dice: currentDice
      });
    },
    imageClick: function(e) {
      var currentDice, rollScore, score, selectedIndex, _ref;
      console.log("click");
      selectedIndex = $(e.target).data("number");
      $(e.target).toggleClass("faded");
      currentDice = this.state.dice;
      rollScore = this.state.rollScore;
      if ((_ref = currentDice[selectedIndex].state) === 0 || _ref === 1) {
        this.setDiceState(selectedIndex, currentDice[selectedIndex].state === 0 ? 1 : 0);
      }
      score = this.props.game.calculateScore();
      return this.setState({
        rollScore: this.props.player.setTempScore(score)
      });
    },
    updateDice: function() {
      var currentRoundScore;
      this.checkCalculated();
      currentRoundScore = this.state.roundScore;
      this.setState({
        roundScore: currentRoundScore + this.props.player.getTempScore()
      });
      this.setState({
        rollScore: this.props.player.setTempScore(0)
      });
      this.setState({
        dice: this.props.game.rollDice()
      });
      this.selectDice();
      if (this.props.game.isFarkle()) {
        console.log("farkled!");
        return this.farkled();
      }
    },
    saveDice: function() {
      var currentRollScore, currentTotalScore, roundScore;
      roundScore = this.state.roundScore;
      currentTotalScore = this.state.totalScore;
      currentRollScore = this.state.rollScore;
      this.setState({
        roundScore: 0,
        rollScore: this.props.player.setTempScore(0),
        canSelect: false,
        totalScore: currentTotalScore + roundScore + currentRollScore
      });
      return this.resetDice();
    },
    authDropbox: function(e) {
      e.preventDefault();
      return client.authenticate(updateAuthenticationStatus);
    },
    render: function() {
      var index, items;
      return d.div({}, d.p({}, "Hello there"), d.p({}, "Round Score: " + this.state.roundScore), d.p({}, "This Round: " + this.state.rollScore), d.p({}, "Total Score: " + this.state.totalScore), d.div({
        className: "row"
      }, (function() {
        var _ref, _results;
        _ref = this.state.dice;
        _results = [];
        for (index in _ref) {
          items = _ref[index];
          _results.push(d.div({
            className: "col-md-1 col-xs-3"
          }, d.img({
            src: "/static/images/" + items.value + ".png",
            "data-number": "" + index,
            id: "die" + items.id
          })));
        }
        return _results;
      }).call(this)), d.div({
        className: "btn-group btn-group-justified",
        role: "group"
      }, d.div({
        className: "btn-group",
        role: "group"
      }, d.button({
        type: "button",
        className: "btn btn-default",
        onClick: this.updateDice
      }, "Roll"), d.button({
        type: "button",
        className: "btn btn-default",
        onClick: this.saveDice
      }, "Save"))));
    }
  });

  CommentBox = React.createClass({
    getInitialState: function() {
      var game, player;
      player = this.getPlayer("Ryan");
      game = this.getGame(player);
      return {
        player: player,
        game: game
      };
    },
    getPlayer: function(name) {
      return new Player(name);
    },
    getGame: function(p) {
      return new Game(p);
    },
    render: function() {
      return DiceView({
        game: this.state.game,
        player: this.state.player
      });
    }
  });

  React.render(CommentBox({}), document.getElementById('container'));

}).call(this);
